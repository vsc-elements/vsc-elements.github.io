---
import type { MarkdownHeading } from "astro";
import GlobalStyles from "../components/GlobalStyles.astro";
import Analytics from "../components/Analytics.astro";
import PrimarySidebar from "../components/PrimarySidebar.astro";
import MarkdownToc from "@components/MarkdownToc.astro";

interface Props {
  title: string;
  headings?: MarkdownHeading[];
}

const { title, headings = [] } = Astro.props;
const { secondarySidebar, contentToolbar } = Astro.slots;
const filteredHeadings = headings.filter((h) => h.depth === 2);
---

<!doctype html>
<html lang="en">
  <head>
    <Analytics />
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="/codicon.css" id="vscode-codicon-stylesheet" />
    <meta name="generator" content={Astro.generator} />
    <GlobalStyles />
    <title>{title} &ndash; VSCode Elements</title>
  </head>
  <body class="vscode-light">
    <div class="container">
      <PrimarySidebar />
      <main>
        {
          contentToolbar ? (
            <div class="content-toolbar">
              <slot name="contentToolbar" />
            </div>
          ) : null
        }
        <div class="content-wrapper">
          <h1>{title}</h1>
          <slot />
        </div>
      </main>
      {
        secondarySidebar || filteredHeadings.length > 0 ? (
          <aside class="secondary-sidebar">
            {secondarySidebar ? <slot name="secondarySidebar" /> : null}
            {filteredHeadings.length > 0 ? (
              <MarkdownToc headings={filteredHeadings} />
            ) : null}
          </aside>
        ) : null
      }
    </div>
    <style is:global>
      :root {
        --Sidebar-width: 250px;
      }

      @font-face {
        font-family: "Source Sans Pro";
        font-style: normal;
        font-weight: 900;
        font-display: swap;
        src: url(/fonts/heading.woff2) format("woff2");
      }

      .container {
        display: flex;
        margin: 0 auto;
        max-width: 1600px;
        width: 100%;
      }

      .content-toolbar {
        background-color: var(--color-light-gray);
        border-bottom: 1px solid #ddd;
        margin: 0 20px;
        padding: 20px 0;
        /* position: sticky; */
        top: 0;
        z-index: 3;
      }

      main {
        height: 100%;
        overflow-y: auto;
        width: 100%;
      }

      .content-wrapper {
        padding: 20px;
      }

      .secondary-sidebar {
        box-sizing: border-box;
        flex-shrink: 0;
        flex-grow: 0;
        height: 100%;
        padding: 20px 0;
        overflow-y: auto;
        width: var(--Sidebar-width);
      }

      h1 {
        font-size: 48px;
        font-weight: normal;
        margin: 0;
        line-height: 1.1;
      }

      h2 {
        font-size: 32px;
        font-weight: normal;
        line-height: 1.2;
        margin: 48px 0 8px;
      }

      h3 {
        font-size: 20px;
        font-weight: normal;
        line-height: 1.2;
        margin: 32px 0 8px;
      }

      .page h1,
      .page h2,
      .page h3 {
        align-items: center;
        display: flex;
      }

      @keyframes highlight {
        from {
          background-color: yellow;
        }

        to {
          background-color: transparent;
        }
      }

      :target {
        animation: highlight 3000ms;
        outline: none;
      }

      h1 a,
      h2 a,
      h3 a {
        color: inherit;
        text-decoration: inherit;
      }

      h1 a:hover,
      h2 a:hover,
      h3 a:hover {
        text-decoration: underline;
      }

      h1 a:focus,
      h2 a:focus,
      h3 a:focus {
        outline: none;
      }

      h1 a:focus-visible,
      h2 a:focus-visible,
      h3 a:focus-visible {
        outline: 1px solid currentColor;
      }

      pre {
        font-size: 16px;
        padding: 10px;
      }
    </style>
  </body>
</html>
